/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package game.life;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;

class LifeTest {
    @Test
    void doit_ImplementerCloneable() {
        assertDoesNotThrow(() -> Life.class.getDeclaredMethod("clone"));
    }

    @Test
    void doit_AvoirUnAttribut_isAlive() {
        assertDoesNotThrow(() -> Life.class.getDeclaredField("isAlive"));
    }

    @Test
    void isAlive_EstFauxParDefault() {
        // given
        // when
        Life life = new Life();
        // then
        assertFalse(life.isAlive());
    }

    @Test
    void doit_AvoirUneFonctionPourActiver() {
        assertDoesNotThrow(() -> Life.class.getDeclaredMethod("wakeUp"));
    }

    @Test
    void wakeUp_doitActiverLaCellule() {
        // given
        Life life = new Life();
        // when
        life.wakeUp();
        // then
        assertTrue(life.isAlive());
    }

    @Test
    void doit_avoirUneFonctionPourTuer() {
        assertDoesNotThrow(() -> Life.class.getDeclaredMethod("kill"));
    }

    @Test
    void wakeUp_doitTuerLaCellule() {
        // given
        Life life = new Life();
        life.wakeUp();
        // when
        life.kill();
        // then
        assertFalse(life.isAlive());
    }

    @Test
    void clone_neDoitPas_RetournerMemeInstance() {
        // given
        Life foo = new Life();
        // when
        Life bar = foo.clone();
        // then
        assertNotEquals(foo, bar);
    }

    @Test
    void clone_doit_RepoduireLesMemesAttributs() {
        // given
        Life foo = new Life();
        foo.wakeUp();
        // when
        Life bar = foo.clone();
        // then
        assertEquals(foo.isAlive(), bar.isAlive());
    }
}

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package game.life;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;

import org.junit.jupiter.api.Test;

class GameTest {
    @Test
    void neDoitPas_AvoirDeConstructeurPublic() {
        assertThrows(Exception.class, () -> Game.class.getConstructor());
    }

    @Test
    void doit_AvoirUneMethode_getInstance() {
        assertDoesNotThrow(() -> Game.class.getDeclaredMethod("getInstance"));
    }

    @Test
    void getInstance_DoitRetournerUneInstance_Game() throws NoSuchMethodException, SecurityException {
        assertEquals(Game.class.getClass(), Game.class.getDeclaredMethod("getInstance").getReturnType().getClass());
    }

    @Test
    void getInstance_DoitRenvoyerToujoursLaMemeInstance() {
        // given
        Game foo = Game.getInstance();
        Game bar = Game.getInstance();
        // when
        boolean eq = foo.equals(bar);
        // then
        assertTrue(eq);
    }

    @Test
    void doit_AvoirUneListeDeCellules() {
        assertDoesNotThrow(() -> Game.class.getDeclaredMethod("getCells"));
    }

    @Test
    void getCells_doitRetournerUneListeDe_Cells() throws NoSuchMethodException, SecurityException {
        assertEquals(List.class.getClass(), Game.class.getDeclaredMethod("getCells").getReturnType().getClass());
    }

    @Test
    void getCells_neDoitPasEtreNull() {
        assertNotNull(Game.getCells());
    }

    @Test
    void getCells_DoitToujoursRetournerLaMemeListe() {
        final List<Life> foo = Game.getCells();
        final List<Life> bar = Game.getCells();
        assertEquals(foo, bar);
    }

    @Test
    void getCells_DoitRetournerAuMoinsUne_Cell() {
        assertTrue(Game.getCells().size() >= 1);
    }

    @Test
    void doit_UneFonctionPourInitialiser_lives() {
        assertDoesNotThrow(() -> GameBusiness.class.getDeclaredMethod("initCells"));
    }

    @Test
    void initCells_doit_RetournerUneListeDe_Cells() throws NoSuchMethodException, SecurityException {
        assertEquals(List.class.getClass(),
                GameBusiness.class.getDeclaredMethod("initCells").getReturnType().getClass());
    }

    @Test
    void initCells_doit_pouvoirPrendreUnStringEnParametre() {
        assertDoesNotThrow(() -> GameBusiness.class.getDeclaredMethod("initCells", String.class));
    }

    @Test
    void initCells_doit_throwSi_rawData_estNull() {
        assertThrows(GameException.class, () -> GameBusiness.initCells(null));

    }

    @Test
    void initCells_doit_throwSiLaTailleDe_rawData_nestPasUnCarre() {
        assertThrows(GameException.class, () -> GameBusiness.initCells("  "));
    }

    @Test
    void initCells_doit_InstancierUneCellulePourChaqueCharactereDe_rawData() throws GameException {
        // given
        // when
        GameBusiness.initCells(" ");
        // then
        assertEquals(1, Game.getCells().size());
    }

    @Test
    void getCells_DoitAvoirUneLongueur_25() {
        assertEquals(25, Game.getCells().size());
    }

    @Test
    void initCells_NeDoitPasConserverLesInitialisationsPrecedentes() throws GameException {
        GameBusiness.initCells(" ");
        GameBusiness.initCells("    ");
        assertEquals(4, Game.getCells().size());
    }

    @Test
    void initCells_doit_AvoirUneCelluleVivante_Quand_UneStar() throws GameException {
        GameBusiness.initCells("*");
        assertTrue(Game.getCells().get(0).isAlive());
    }

    @Test
    void initCells_doit_GererLaCreationDePlusieurs_Life() throws GameException {
        GameBusiness.initCells("f*ck");
        assertFalse(Game.getCells().get(0).isAlive());
        assertTrue(Game.getCells().get(1).isAlive());
        assertFalse(Game.getCells().get(2).isAlive());
        assertFalse(Game.getCells().get(3).isAlive());
    }

    @Test
    void doit_AvoirUneFonction_toString() {
        assertDoesNotThrow(() -> GameBusiness.class.getDeclaredMethod("bluePrint"));
    }

}

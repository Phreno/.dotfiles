/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package builder;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertInstanceOf;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

class DirectorTest {

    @Test
    @Disabled
    void build_doit_FaireAppelAuUserBuilderPourConstruire_User() {
    }

    @Test
    void build_doit_RetournerUnUtilisateur() throws NoSuchMethodException, SecurityException {
        Method declaredMethod = Director.class.getDeclaredMethod("build");
        assertInstanceOf(User.class.getClass(), declaredMethod.getReturnType());
    }

    @Test
    void doit_AvoirUneMethodePourCreerUn_User() {
        assertDoesNotThrow(() -> Director.class.getDeclaredMethod("build"));
    }

    @Test
    void doit_ActualiserBuilderPendantInstanciation()
            throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        BabyBuilder builder = new BabyBuilder();
        Director director = new Director(builder);
        Field declaredField = Director.class.getDeclaredField("builder");
        declaredField.setAccessible(true);
        assertEquals(builder, declaredField.get(director));
    }

    @Test
    void doit_AvoirUnAttribut_UserBuilder() {
        assertDoesNotThrow(() -> Director.class.getDeclaredField("builder"));
    }

    @Test
    void doit_PrendreUnBuilderDansLeConstructeur() {
        assertDoesNotThrow(() -> Director.class.getConstructor(UserBuilder.class));
    }
}
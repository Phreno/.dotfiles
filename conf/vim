set number
set relativenumber

nmap <F7> :cp<CR>
nmap <F8> :cn<CR>

let g:ale_sign_column_always = 1

let g:indent_guides_enable_on_vim_startup = 1

set list
set listchars=nbsp:␣,trail:•,precedes:«,extends:»,tab:▸

autocmd   BufNewFile      *.sh                       0r   ~/.dotfiles/skeletons/bash-template.sh
autocmd   BufNewFile      LICENSE.md                 0r   ~/.dotfiles/skeletons/LICENSE.md
autocmd   BufNewFile      *.p5js.html                0r   ~/.dotfiles/skeletons/p5js-standalone.html
autocmd   BufNewFile      *.p5js.js                  0r   ~/.dotfiles/skeletons/p5js-sample.js

au BufReadPost vim set syntax=vim
au BufReadPost nvim set syntax=vim

colorscheme dracula

augroup fmt
  autocmd!
  autocmd BufWritePre * undojoin | Neoformat
augroup END

nnoremap <Home> :SidewaysLeft<cr>
nnoremap <End> :SidewaysRight<cr>
let g:hardtime_default_on = 1

" Dim inactive windows using 'colorcolumn' setting
" This tends to slow down redrawing, but is very useful.
" Based on https://groups.google.com/d/msg/vim_use/IJU-Vk-QLJE/xz4hjPjCRBUJ
" XXX: this will only work with lines containing text (i.e. not '~')
" from 
if exists('+colorcolumn')
  function! s:DimInactiveWindows()
    for i in range(1, tabpagewinnr(tabpagenr(), '$'))
      let l:range = ""
      if i != winnr()
        if &wrap
         " HACK: when wrapping lines is enabled, we use the maximum number
         " of columns getting highlighted. This might get calculated by
         " looking for the longest visible line and using a multiple of
         " winwidth().
         let l:width=256 " max
        else
         let l:width=winwidth(i)
        endif
        let l:range = join(range(1, l:width), ',')
      endif
      call setwinvar(i, '&colorcolumn', l:range)
    endfor
  endfunction
  augroup DimInactiveWindows
    au!
    au WinEnter * call s:DimInactiveWindows()
    au WinEnter * set cursorline
    au WinLeave * set nocursorline
  augroup END
endif

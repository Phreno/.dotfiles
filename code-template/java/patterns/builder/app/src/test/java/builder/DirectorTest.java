/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package builder;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertInstanceOf;
import static org.mockito.Mockito.verify;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

class DirectorTest {

    @Mock
    private BabyBuilder builder;
    private Director director;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
        director = new Director(builder);
    }

    @Test
    void build_doit_FaireAppelAuUserBuilderPourConstruire_User() {
        // given
        // when
        director.build();
        // then
        verify(builder).build();
        verify(builder).buildAge();
        verify(builder).buildBalance();
        verify(builder).buildCompany();
        verify(builder).buildEmail();
        verify(builder).buildGender();
        verify(builder).buildName();
        verify(builder).buildPicture();
    }

    @Test
    void build_doit_RetournerUnUtilisateur() throws NoSuchMethodException, SecurityException {
        Method declaredMethod = Director.class.getDeclaredMethod("build");
        assertInstanceOf(User.class.getClass(), declaredMethod.getReturnType());
    }

    @Test
    void doit_AvoirUneMethodePourCreerUn_User() {
        assertDoesNotThrow(() -> Director.class.getDeclaredMethod("build"));
    }

    @Test
    void doit_ActualiserBuilderPendantInstanciation()
            throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        Field declaredField = Director.class.getDeclaredField("builder");
        declaredField.setAccessible(true);
        assertEquals(builder, declaredField.get(director));
    }

    @Test
    void doit_AvoirUnAttribut_UserBuilder() {
        assertDoesNotThrow(() -> Director.class.getDeclaredField("builder"));
    }

    @Test
    void doit_PrendreUnBuilderDansLeConstructeur() {
        assertDoesNotThrow(() -> Director.class.getConstructor(UserBuilder.class));
    }
}